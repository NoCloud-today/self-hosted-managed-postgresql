services:
  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: postgres.Dockerfile
      args:
        - POSTGRES_PASSWORD=postgres
    environment:
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/postgres_data:/var/lib/postgresql/16/main
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "su postgres -c 'pg_isready' && su postgres -c 'pgbackrest info' | grep -q 'status: ok'"]
      interval: 3s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - mynetwork
    depends_on:
      createbuckets:
        condition: service_completed_successfully
  backup-manager:
    container_name: backup-manager
    build:
      context: .
      dockerfile: backup-manager.Dockerfile
    environment:
      - POSTGRES_HOST=postgres
    ports:
      - "8000:8000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/pgbackrest:/var/lib/pgbackrest
    networks:
      - mynetwork
    depends_on:
      postgres:
        condition: service_healthy
      createbuckets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8000/health"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
  createbuckets:
    image: minio/mc
    environment:
      MINIO_HOST: https://backup-manager-s3:9000
      MINIO_USER: minioadmin
      MINIO_PASSWORD: minioadmin
    networks:
      - mynetwork
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio-s3 $${MINIO_HOST} $${MINIO_USER} $${MINIO_PASSWORD} --insecure;
      /usr/bin/mc mb minio-s3/pgbackrest --ignore-existing --insecure;
      /usr/bin/mc anonymous set public minio-s3/pgbackrest --insecure; 
      exit 0;
      "
networks:
  mynetwork:
    driver: bridge