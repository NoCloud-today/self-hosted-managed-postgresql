services:
  backup-manager-s3:
    container_name: backup-manager-s3
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/minio:/minio_data
      - ./certs:/root/.minio/certs
    command: minio server /minio_data --console-address ":9001" --address ":9000" --certs-dir "/root/.minio/certs"
    networks:
      - mynetwork
    healthcheck:
      test: [ "CMD", "curl", "-k", "-f", "https://localhost:9000/minio/health/live" ]
      interval: 3s
      timeout: 20s
      retries: 3
  createbuckets:
    image: minio/mc
    depends_on:
      backup-manager-s3:
        condition: service_healthy
    networks:
      - mynetwork
    entrypoint: >
      /bin/sh -c "
      echo $MINIO_ROOT_USER;
      /usr/bin/mc alias set minio-s3 https://backup-manager-s3:9000 minioadmin minioadmin --insecure;
      /usr/bin/mc mb minio-s3/pgbackrest --ignore-existing --insecure;
      /usr/bin/mc anonymous set public minio-s3/pgbackrest --insecure; 
      exit 0;
      "
  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: postgres.Dockerfile
      args:
        - POSTGRES_PASSWORD=postgres
    environment:
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
      - "2222:22"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/postgres_data:/var/lib/postgresql/16/main
#      - ./certs:/etc/minio/certs
    restart: always
    healthcheck:
      test: [ "CMD","su","postgres","-c","\"pg_isready\"" ]
      interval: 3s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - mynetwork
    depends_on:
      backup-manager-s3:
        condition: service_healthy
      createbuckets:
        condition: service_completed_successfully
  backup-manager:
    container_name: backup-manager
    build:
      context: .
      dockerfile: backup-manager.Dockerfile
    environment:
      - POSTGRES_HOST=postgres
    ports:
      - "8000:8000"
      - "2223:22"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/pgbackrest:/var/lib/pgbackrest
    networks:
      - mynetwork
    depends_on:
      postgres:
        condition: service_healthy
      backup-manager-s3:
        condition: service_healthy
networks:
  mynetwork:
    driver: bridge